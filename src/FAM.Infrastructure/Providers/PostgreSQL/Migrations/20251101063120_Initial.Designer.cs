// <auto-generated />
using System;
using FAM.Infrastructure.Providers.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FAM.Infrastructure.Providers.PostgreSQL.Migrations
{
    [DbContext(typeof(PostgreSqlDbContext))]
    [Migration("20251101063120_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetCategoryEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Aliases")
                        .HasColumnType("text")
                        .HasColumnName("aliases");

                    b.Property<int>("AssetCount")
                        .HasColumnType("integer")
                        .HasColumnName("asset_count");

                    b.Property<int?>("AuditIntervalMonths")
                        .HasColumnType("integer")
                        .HasColumnName("audit_interval_months");

                    b.Property<string>("CategoryType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_type");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<string>("ComplianceStandards")
                        .HasColumnType("text")
                        .HasColumnName("compliance_standards");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cost_center");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultDepreciationMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("default_depreciation_method");

                    b.Property<decimal?>("DefaultResidualValuePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("default_residual_value_percentage");

                    b.Property<int?>("DefaultUsefulLifeMonths")
                        .HasColumnType("integer")
                        .HasColumnName("default_useful_life_months");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DepreciationAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("depreciation_account_code");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("GLAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("glaccount_code");

                    b.Property<string>("IconName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("icon_name");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("icon_url");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("industry");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCapitalized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_capitalized");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDepreciable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_depreciable");

                    b.Property<bool>("IsSystemCategory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_category");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("long_description");

                    b.Property<decimal?>("MinimumCapitalizationValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("minimum_capitalization_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("path");

                    b.Property<bool>("RequiresAudit")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_audit");

                    b.Property<bool>("RequiresCompliance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_compliance");

                    b.Property<bool>("RequiresInsurance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_insurance");

                    b.Property<bool>("RequiresMaintenance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_maintenance");

                    b.Property<string>("SearchKeywords")
                        .HasColumnType("text")
                        .HasColumnName("search_keywords");

                    b.Property<string>("Sector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sector");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ValuationMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("valuation_method");

                    b.HasKey("Id")
                        .HasName("pk_asset_categories");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_asset_categories_code")
                        .HasFilter("is_deleted = false AND code IS NOT NULL");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_asset_categories_is_active");

                    b.HasIndex("Level")
                        .HasDatabaseName("ix_asset_categories_level");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_asset_categories_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_asset_categories_parent_id");

                    b.ToTable("asset_categories");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetConditionEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_asset_conditions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_asset_conditions_name")
                        .HasFilter("is_deleted = false");

                    b.ToTable("asset_conditions");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingCode")
                        .HasColumnType("text")
                        .HasColumnName("accounting_code");

                    b.Property<decimal?>("AccumulatedDepreciation")
                        .HasColumnType("numeric")
                        .HasColumnName("accumulated_depreciation");

                    b.Property<string>("AssetTag")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("asset_tag");

                    b.Property<long?>("AssetTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_type_id");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("barcode");

                    b.Property<string>("CampaignCode")
                        .HasColumnType("text")
                        .HasColumnName("campaign_code");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<string>("ComplianceStatus")
                        .HasColumnType("text")
                        .HasColumnName("compliance_status");

                    b.Property<long?>("ConditionId")
                        .HasColumnType("bigint")
                        .HasColumnName("condition_id");

                    b.Property<string>("CostCenter")
                        .HasColumnType("text")
                        .HasColumnName("cost_center");

                    b.Property<long?>("CountryEfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("CurrentBookValue")
                        .HasColumnType("numeric")
                        .HasColumnName("current_book_value");

                    b.Property<decimal?>("CurrentValue")
                        .HasColumnType("numeric")
                        .HasColumnName("current_value");

                    b.Property<string>("CustomFields")
                        .HasColumnType("text")
                        .HasColumnName("custom_fields");

                    b.Property<string>("DataClassification")
                        .HasColumnType("text")
                        .HasColumnName("data_classification");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("DepreciationMethod")
                        .HasColumnType("text")
                        .HasColumnName("depreciation_method");

                    b.Property<string>("Dimensions")
                        .HasColumnType("text")
                        .HasColumnName("dimensions");

                    b.Property<string>("DisposalMethod")
                        .HasColumnType("text")
                        .HasColumnName("disposal_method");

                    b.Property<DateTime?>("EndOfLifeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_of_life_date");

                    b.Property<string>("EnergyRating")
                        .HasColumnType("text")
                        .HasColumnName("energy_rating");

                    b.Property<int?>("EstimatedRemainingLifeMonths")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_remaining_life_months");

                    b.Property<string>("FundingSource")
                        .HasColumnType("text")
                        .HasColumnName("funding_source");

                    b.Property<string>("GLAccount")
                        .HasColumnType("text")
                        .HasColumnName("glaccount");

                    b.Property<string>("Hostname")
                        .HasColumnType("text")
                        .HasColumnName("hostname");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text")
                        .HasColumnName("ipaddress");

                    b.Property<DateTime?>("InServiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("in_service_date");

                    b.Property<DateTime?>("InsuranceExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insurance_expiry_date");

                    b.Property<string>("InsurancePolicyNo")
                        .HasColumnType("text")
                        .HasColumnName("insurance_policy_no");

                    b.Property<decimal?>("InsuredValue")
                        .HasColumnType("numeric")
                        .HasColumnName("insured_value");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_no");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnvironmentallyFriendly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_environmentally_friendly");

                    b.Property<DateTime?>("LastAuditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_audit_date");

                    b.Property<DateTime?>("LastDepreciationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_depreciation_date");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_maintenance_date");

                    b.Property<int?>("LicenseCount")
                        .HasColumnType("integer")
                        .HasColumnName("license_count");

                    b.Property<DateTime?>("LicenseExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("license_expiry_date");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text")
                        .HasColumnName("license_key");

                    b.Property<long?>("LifecycleStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("lifecycle_status_id");

                    b.Property<string>("LocationCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("location_code");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<string>("MACAddress")
                        .HasColumnType("text")
                        .HasColumnName("macaddress");

                    b.Property<string>("MaintenanceContractNo")
                        .HasColumnType("text")
                        .HasColumnName("maintenance_contract_no");

                    b.Property<int?>("MaintenanceIntervalDays")
                        .HasColumnType("integer")
                        .HasColumnName("maintenance_interval_days");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Material")
                        .HasColumnType("text")
                        .HasColumnName("material");

                    b.Property<long?>("ModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<decimal?>("NetBookValue")
                        .HasColumnType("numeric")
                        .HasColumnName("net_book_value");

                    b.Property<DateTime?>("NextAuditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_audit_date");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_maintenance_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("notes");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("text")
                        .HasColumnName("operating_system");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<decimal?>("PowerConsumption")
                        .HasColumnType("numeric")
                        .HasColumnName("power_consumption");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("text")
                        .HasColumnName("project_code");

                    b.Property<decimal?>("PurchaseCost")
                        .HasColumnType("numeric")
                        .HasColumnName("purchase_cost");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date");

                    b.Property<string>("PurchaseOrderNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("purchase_order_no");

                    b.Property<string>("QRCode")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("qrcode");

                    b.Property<string>("RFIDTag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("rfidtag");

                    b.Property<decimal?>("ReplacementCost")
                        .HasColumnType("numeric")
                        .HasColumnName("replacement_cost");

                    b.Property<bool>("RequiresBackgroundCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_background_check");

                    b.Property<decimal?>("ResidualValue")
                        .HasColumnType("numeric")
                        .HasColumnName("residual_value");

                    b.Property<string>("RiskLevel")
                        .HasColumnType("text")
                        .HasColumnName("risk_level");

                    b.Property<string>("SecurityClassification")
                        .HasColumnType("text")
                        .HasColumnName("security_classification");

                    b.Property<string>("SerialNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("serial_no");

                    b.Property<string>("ServiceLevel")
                        .HasColumnType("text")
                        .HasColumnName("service_level");

                    b.Property<string>("SoftwareVersion")
                        .HasColumnType("text")
                        .HasColumnName("software_version");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<DateTime?>("SupportExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("support_expiry_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long?>("UsageStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_status_id");

                    b.Property<int?>("UsefulLifeMonths")
                        .HasColumnType("integer")
                        .HasColumnName("useful_life_months");

                    b.Property<int?>("WarrantyMonths")
                        .HasColumnType("integer")
                        .HasColumnName("warranty_months");

                    b.Property<string>("WarrantyTerms")
                        .HasColumnType("text")
                        .HasColumnName("warranty_terms");

                    b.Property<DateTime?>("WarrantyUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("warranty_until");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_assets");

                    b.HasIndex("AssetTag")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_asset_tag")
                        .HasFilter("is_deleted = false AND asset_tag IS NOT NULL");

                    b.HasIndex("AssetTypeId")
                        .HasDatabaseName("ix_assets_asset_type_id");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_barcode")
                        .HasFilter("is_deleted = false AND barcode IS NOT NULL");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_assets_category_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_assets_company_id");

                    b.HasIndex("ConditionId")
                        .HasDatabaseName("ix_assets_condition_id");

                    b.HasIndex("CountryEfId");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_assets_country_id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LifecycleStatusId")
                        .HasDatabaseName("ix_assets_lifecycle_status_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_assets_location_id");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_assets_manufacturer_id");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_assets_model_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_assets_owner_id");

                    b.HasIndex("QRCode")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_qr_code")
                        .HasFilter("is_deleted = false AND qrcode IS NOT NULL");

                    b.HasIndex("RFIDTag")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_rfid_tag")
                        .HasFilter("is_deleted = false AND rfidtag IS NOT NULL");

                    b.HasIndex("SerialNo")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_serial_no")
                        .HasFilter("is_deleted = false AND serial_no IS NOT NULL");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_assets_supplier_id");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UsageStatusId")
                        .HasDatabaseName("ix_assets_usage_status_id");

                    b.ToTable("assets");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetEventEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActorId")
                        .HasColumnType("bigint")
                        .HasColumnName("actor_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_id");

                    b.Property<DateTime>("At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("EventCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("event_code");

                    b.Property<long?>("EventTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_type_id");

                    b.Property<string>("FromLifecycleCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("from_lifecycle_code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("note");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("ToLifecycleCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("to_lifecycle_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_asset_events");

                    b.HasIndex("ActorId")
                        .HasDatabaseName("ix_asset_events_actor_id");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_asset_events_asset_id");

                    b.HasIndex("At")
                        .HasDatabaseName("ix_asset_events_at");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_asset_events_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_asset_events_deleted_by_id");

                    b.HasIndex("EventTypeId")
                        .HasDatabaseName("ix_asset_events_event_type_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_asset_events_updated_by_id");

                    b.ToTable("asset_events");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetEventTypeEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer")
                        .HasColumnName("order_no");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_asset_event_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_asset_event_types_code")
                        .HasFilter("is_deleted = false");

                    b.ToTable("asset_event_types");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetTypeEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccumulatedDepreciationAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("accumulated_depreciation_account_code");

                    b.Property<string>("Aliases")
                        .HasColumnType("text")
                        .HasColumnName("aliases");

                    b.Property<string>("ApprovalWorkflow")
                        .HasColumnType("text")
                        .HasColumnName("approval_workflow");

                    b.Property<string>("AssetAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("asset_account_code");

                    b.Property<string>("AssetClass")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("asset_class");

                    b.Property<int>("AssetCount")
                        .HasColumnType("integer")
                        .HasColumnName("asset_count");

                    b.Property<int?>("AuditIntervalMonths")
                        .HasColumnType("integer")
                        .HasColumnName("audit_interval_months");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<string>("ComplianceStandards")
                        .HasColumnType("text")
                        .HasColumnName("compliance_standards");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cost_center");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomFieldsSchema")
                        .HasColumnType("text")
                        .HasColumnName("custom_fields_schema");

                    b.Property<string>("DefaultDepreciationMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("default_depreciation_method");

                    b.Property<int?>("DefaultMaintenanceIntervalDays")
                        .HasColumnType("integer")
                        .HasColumnName("default_maintenance_interval_days");

                    b.Property<string>("DefaultMaintenanceType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("default_maintenance_type");

                    b.Property<decimal?>("DefaultResidualValuePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("default_residual_value_percentage");

                    b.Property<string>("DefaultSecurityClassification")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("default_security_classification");

                    b.Property<int?>("DefaultUsefulLifeMonths")
                        .HasColumnType("integer")
                        .HasColumnName("default_useful_life_months");

                    b.Property<int?>("DefaultWarrantyMonths")
                        .HasColumnType("integer")
                        .HasColumnName("default_warranty_months");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DepreciationAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("depreciation_account_code");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_date");

                    b.Property<string>("ExpenseAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("expense_account_code");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<string>("GLAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("glaccount_code");

                    b.Property<string>("IconName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("icon_name");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("icon_url");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAssignable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_assignable");

                    b.Property<bool>("IsCapitalized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_capitalized");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_consumable");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDepreciable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_depreciable");

                    b.Property<bool>("IsITAsset")
                        .HasColumnType("boolean")
                        .HasColumnName("is_itasset");

                    b.Property<bool>("IsSystemType")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_type");

                    b.Property<bool>("IsTangible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tangible");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("long_description");

                    b.Property<decimal?>("MinimumCapitalizationValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("minimum_capitalization_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("path");

                    b.Property<string>("ProcurementNotes")
                        .HasColumnType("text")
                        .HasColumnName("procurement_notes");

                    b.Property<string>("RegulatoryRequirements")
                        .HasColumnType("text")
                        .HasColumnName("regulatory_requirements");

                    b.Property<string>("RequiredFields")
                        .HasColumnType("text")
                        .HasColumnName("required_fields");

                    b.Property<bool>("RequiresAccessControl")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_access_control");

                    b.Property<bool>("RequiresApprovalToAcquire")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_approval_to_acquire");

                    b.Property<bool>("RequiresApprovalToDispose")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_approval_to_dispose");

                    b.Property<bool>("RequiresAudit")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_audit");

                    b.Property<bool>("RequiresBackgroundCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_background_check");

                    b.Property<bool>("RequiresCalibration")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_calibration");

                    b.Property<bool>("RequiresCompliance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_compliance");

                    b.Property<bool>("RequiresInsurance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_insurance");

                    b.Property<bool>("RequiresLicense")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_license");

                    b.Property<bool>("RequiresMaintenance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_maintenance");

                    b.Property<string>("SearchKeywords")
                        .HasColumnType("text")
                        .HasColumnName("search_keywords");

                    b.Property<string>("Subcategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subcategory");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ValuationCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("valuation_currency");

                    b.Property<string>("ValuationMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("valuation_method");

                    b.HasKey("Id")
                        .HasName("pk_asset_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_asset_types_code")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_asset_types_is_active");

                    b.HasIndex("Level")
                        .HasDatabaseName("ix_asset_types_level");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_asset_types_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_asset_types_parent_id");

                    b.ToTable("asset_types");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssignmentEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<long>("AssigneeId")
                        .HasColumnType("bigint")
                        .HasColumnName("assignee_id");

                    b.Property<string>("AssigneeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assignee_type");

                    b.Property<long?>("ByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("by_user_id");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("released_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_asset_assignments");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_assignments_asset_id");

                    b.HasIndex("AssignedAt")
                        .HasDatabaseName("ix_assignments_assigned_at");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_assignments_assignee_id");

                    b.HasIndex("ByUserId")
                        .HasDatabaseName("ix_assignments_by_user_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_asset_assignments_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_asset_assignments_deleted_by_id");

                    b.HasIndex("ReleasedAt")
                        .HasDatabaseName("ix_assignments_released_at");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_asset_assignments_updated_by_id");

                    b.ToTable("asset_assignments");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AttachmentEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("file_url");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<long?>("UploadedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by");

                    b.HasKey("Id")
                        .HasName("pk_asset_attachments");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_attachments_asset_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_asset_attachments_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_asset_attachments_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_asset_attachments_updated_by_id");

                    b.HasIndex("UploadedAt")
                        .HasDatabaseName("ix_attachments_uploaded_at");

                    b.HasIndex("UploadedBy")
                        .HasDatabaseName("ix_attachments_uploaded_by");

                    b.ToTable("asset_attachments");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.CompanyDetailsEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Domain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("domain");

                    b.Property<DateTime?>("EstablishedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("established_on");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("node_id");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tax_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_company_details");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("ix_company_details_domain")
                        .HasFilter("is_deleted = false AND domain IS NOT NULL");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_details_node_id")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("TaxCode")
                        .IsUnique()
                        .HasDatabaseName("ix_company_details_tax_code")
                        .HasFilter("is_deleted = false AND tax_code IS NOT NULL");

                    b.ToTable("company_details");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alpha3Code")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("alpha3_code");

                    b.Property<decimal?>("Area")
                        .HasColumnType("numeric")
                        .HasColumnName("area");

                    b.Property<string>("CallingCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("calling_code");

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("capital");

                    b.Property<string>("CoatOfArms")
                        .HasColumnType("text")
                        .HasColumnName("coat_of_arms");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("code");

                    b.Property<string>("Continent")
                        .HasColumnType("text")
                        .HasColumnName("continent");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency_code");

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("currency_name");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text")
                        .HasColumnName("currency_symbol");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Flag")
                        .HasColumnType("text")
                        .HasColumnName("flag");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEUMember")
                        .HasColumnType("boolean")
                        .HasColumnName("is_eumember");

                    b.Property<bool>("IsIndependent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_independent");

                    b.Property<bool>("IsUNMember")
                        .HasColumnType("boolean")
                        .HasColumnName("is_unmember");

                    b.Property<string>("Languages")
                        .HasColumnType("text")
                        .HasColumnName("languages");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Nationality")
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<string>("NativeName")
                        .HasColumnType("text")
                        .HasColumnName("native_name");

                    b.Property<string>("NumericCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("numeric_code");

                    b.Property<string>("OfficialName")
                        .HasColumnType("text")
                        .HasColumnName("official_name");

                    b.Property<long?>("Population")
                        .HasColumnType("bigint")
                        .HasColumnName("population");

                    b.Property<string>("PrimaryLanguage")
                        .HasColumnType("text")
                        .HasColumnName("primary_language");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region");

                    b.Property<string>("SubRegion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sub_region");

                    b.Property<string>("TimeZones")
                        .HasColumnType("text")
                        .HasColumnName("time_zones");

                    b.Property<string>("TopLevelDomain")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("top_level_domain");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("Alpha3Code")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_alpha3_code")
                        .HasFilter("is_deleted = false AND alpha3_code IS NOT NULL");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_code")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_countries_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_countries_deleted_by_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_countries_name");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_countries_updated_by_id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.DepartmentDetailsEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("BudgetYear")
                        .HasColumnType("numeric")
                        .HasColumnName("budget_year");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cost_center");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("Headcount")
                        .HasColumnType("integer")
                        .HasColumnName("headcount");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("node_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_department_details");

                    b.HasIndex("CostCenter")
                        .IsUnique()
                        .HasDatabaseName("ix_department_details_cost_center")
                        .HasFilter("is_deleted = false AND cost_center IS NOT NULL");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasDatabaseName("ix_department_details_node_id")
                        .HasFilter("is_deleted = false");

                    b.ToTable("department_details");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.FinanceEntryEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_id");

                    b.Property<decimal?>("BookValueAfter")
                        .HasColumnType("numeric")
                        .HasColumnName("book_value_after");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long?>("CreatedById1")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entry_type");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("Period")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_finance_entries");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_finance_entries_asset_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_finance_entries_created_by_id");

                    b.HasIndex("CreatedById1");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_finance_entries_deleted_by_id");

                    b.HasIndex("EntryType")
                        .HasDatabaseName("ix_finance_entries_entry_type");

                    b.HasIndex("Period")
                        .HasDatabaseName("ix_finance_entries_period");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_finance_entries_updated_by_id");

                    b.ToTable("finance_entries");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.LifecycleStatusEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer")
                        .HasColumnName("order_no");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lifecycle_statuses");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_lifecycle_statuses_code")
                        .HasFilter("is_deleted = false");

                    b.ToTable("lifecycle_statuses");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.LocationEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("CountryEfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("FullPath")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("full_path");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("PathIds")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("path_ids");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_code")
                        .HasFilter("is_deleted = false AND code IS NOT NULL");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_locations_company_id");

                    b.HasIndex("CountryEfId");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_locations_country_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_locations_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_locations_parent_id");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ManufacturerEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountManager")
                        .HasColumnType("text")
                        .HasColumnName("account_manager");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasColumnType("numeric")
                        .HasColumnName("annual_revenue");

                    b.Property<string>("BrandName")
                        .HasColumnType("text")
                        .HasColumnName("brand_name");

                    b.Property<string>("BusinessType")
                        .HasColumnType("text")
                        .HasColumnName("business_type");

                    b.Property<string>("Certifications")
                        .HasColumnType("text")
                        .HasColumnName("certifications");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_phone");

                    b.Property<long?>("CountryEfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("DUNSNumber")
                        .HasColumnType("text")
                        .HasColumnName("dunsnumber");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_rate");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("integer")
                        .HasColumnName("employee_count");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text")
                        .HasColumnName("facebook_url");

                    b.Property<string>("Fax")
                        .HasColumnType("text")
                        .HasColumnName("fax");

                    b.Property<DateTime?>("FoundedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("founded_date");

                    b.Property<string>("HeadquartersAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("headquarters_address");

                    b.Property<string>("ISO14001Certified")
                        .HasColumnType("text")
                        .HasColumnName("iso14001_certified");

                    b.Property<string>("ISO27001Certified")
                        .HasColumnType("text")
                        .HasColumnName("iso27001_certified");

                    b.Property<string>("ISO9001Certified")
                        .HasColumnType("text")
                        .HasColumnName("iso9001_certified");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("industry");

                    b.Property<string>("IndustryType")
                        .HasColumnType("text")
                        .HasColumnName("industry_type");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preferred");

                    b.Property<string>("LeadTime")
                        .HasColumnType("text")
                        .HasColumnName("lead_time");

                    b.Property<string>("LegalName")
                        .HasColumnType("text")
                        .HasColumnName("legal_name");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text")
                        .HasColumnName("linked_in_url");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("MinimumOrderQuantity")
                        .HasColumnType("text")
                        .HasColumnName("minimum_order_quantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("PartnerSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("partner_since");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("text")
                        .HasColumnName("payment_terms");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("PreferredCurrency")
                        .HasColumnType("text")
                        .HasColumnName("preferred_currency");

                    b.Property<decimal?>("PriceRating")
                        .HasColumnType("numeric")
                        .HasColumnName("price_rating");

                    b.Property<decimal?>("QualityRating")
                        .HasColumnType("numeric")
                        .HasColumnName("quality_rating");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registration_number");

                    b.Property<string>("RevenueCurrency")
                        .HasColumnType("text")
                        .HasColumnName("revenue_currency");

                    b.Property<string>("SLADocumentUrl")
                        .HasColumnType("text")
                        .HasColumnName("sladocument_url");

                    b.Property<decimal?>("ServiceRating")
                        .HasColumnType("numeric")
                        .HasColumnName("service_rating");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int?>("StandardWarrantyMonths")
                        .HasColumnType("integer")
                        .HasColumnName("standard_warranty_months");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("SupportContact")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("support_contact");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("text")
                        .HasColumnName("support_email");

                    b.Property<string>("SupportHours")
                        .HasColumnType("text")
                        .HasColumnName("support_hours");

                    b.Property<string>("SupportPhone")
                        .HasColumnType("text")
                        .HasColumnName("support_phone");

                    b.Property<string>("SupportWebsite")
                        .HasColumnType("text")
                        .HasColumnName("support_website");

                    b.Property<string>("Tagline")
                        .HasColumnType("text")
                        .HasColumnName("tagline");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_id");

                    b.Property<string>("TwitterHandle")
                        .HasColumnType("text")
                        .HasColumnName("twitter_handle");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("VATNumber")
                        .HasColumnType("text")
                        .HasColumnName("vatnumber");

                    b.Property<string>("WarrantyPolicy")
                        .HasColumnType("text")
                        .HasColumnName("warranty_policy");

                    b.Property<string>("WarrantyTerms")
                        .HasColumnType("text")
                        .HasColumnName("warranty_terms");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_manufacturers_code")
                        .HasFilter("is_deleted = false AND code IS NOT NULL");

                    b.HasIndex("CountryEfId");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_manufacturers_country_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_manufacturers_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_manufacturers_deleted_by_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_manufacturers_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_manufacturers_name");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_manufacturers_updated_by_id");

                    b.ToTable("manufacturers");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ModelEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AvailabilityStatus")
                        .HasColumnType("text")
                        .HasColumnName("availability_status");

                    b.Property<decimal?>("AverageCost")
                        .HasColumnType("numeric")
                        .HasColumnName("average_cost");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("Certifications")
                        .HasColumnType("text")
                        .HasColumnName("certifications");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<string>("CompatibleModels")
                        .HasColumnType("text")
                        .HasColumnName("compatible_models");

                    b.Property<string>("ComplianceStandards")
                        .HasColumnType("text")
                        .HasColumnName("compliance_standards");

                    b.Property<string>("Connectivity")
                        .HasColumnType("text")
                        .HasColumnName("connectivity");

                    b.Property<string>("CostCurrency")
                        .HasColumnType("text")
                        .HasColumnName("cost_currency");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<int?>("CurrentStock")
                        .HasColumnType("integer")
                        .HasColumnName("current_stock");

                    b.Property<string>("DatasheetUrl")
                        .HasColumnType("text")
                        .HasColumnName("datasheet_url");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("DepreciationMethod")
                        .HasColumnType("text")
                        .HasColumnName("depreciation_method");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DimensionUnit")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("dimension_unit");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dimensions");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discontinued_date");

                    b.Property<string>("Display")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display");

                    b.Property<string>("EnergyRating")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("energy_rating");

                    b.Property<string>("Generation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("generation");

                    b.Property<string>("Graphics")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("graphics");

                    b.Property<string>("Humidity")
                        .HasColumnType("text")
                        .HasColumnName("humidity");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("IncludedAccessories")
                        .HasColumnType("text")
                        .HasColumnName("included_accessories");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDepreciable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_depreciable");

                    b.Property<bool>("IsEPEATCertified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_epeatcertified");

                    b.Property<bool>("IsEnergyStarCertified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_energy_star_certified");

                    b.Property<bool>("IsRoHSCompliant")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ro_hscompliant");

                    b.Property<bool>("IsTangible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tangible");

                    b.Property<string>("Keywords")
                        .HasColumnType("text")
                        .HasColumnName("keywords");

                    b.Property<DateTime?>("LastOrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_order_date");

                    b.Property<int?>("LicenseDurationMonths")
                        .HasColumnType("integer")
                        .HasColumnName("license_duration_months");

                    b.Property<string>("LicenseType")
                        .HasColumnType("text")
                        .HasColumnName("license_type");

                    b.Property<string>("LifecycleStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lifecycle_status");

                    b.Property<decimal?>("MSRP")
                        .HasColumnType("numeric")
                        .HasColumnName("msrp");

                    b.Property<string>("MSRPCurrency")
                        .HasColumnType("text")
                        .HasColumnName("msrpcurrency");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Material")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("material");

                    b.Property<int?>("MaxInstallations")
                        .HasColumnType("integer")
                        .HasColumnName("max_installations");

                    b.Property<string>("Memory")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("memory");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<string>("NetworkInterfaces")
                        .HasColumnType("text")
                        .HasColumnName("network_interfaces");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("operating_system");

                    b.Property<string>("OperatingTemperature")
                        .HasColumnType("text")
                        .HasColumnName("operating_temperature");

                    b.Property<string>("OptionalAccessories")
                        .HasColumnType("text")
                        .HasColumnName("optional_accessories");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("part_number");

                    b.Property<string>("Ports")
                        .HasColumnType("text")
                        .HasColumnName("ports");

                    b.Property<decimal?>("PowerConsumption")
                        .HasColumnType("numeric")
                        .HasColumnName("power_consumption");

                    b.Property<string>("PowerRequirements")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("power_requirements");

                    b.Property<string>("Processor")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("processor");

                    b.Property<string>("ProcurementNotes")
                        .HasColumnType("text")
                        .HasColumnName("procurement_notes");

                    b.Property<string>("ProductFamily")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_family");

                    b.Property<string>("ProductPageUrl")
                        .HasColumnType("text")
                        .HasColumnName("product_page_url");

                    b.Property<string>("QuickStartGuideUrl")
                        .HasColumnType("text")
                        .HasColumnName("quick_start_guide_url");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("integer")
                        .HasColumnName("reorder_level");

                    b.Property<string>("RequiredAccessories")
                        .HasColumnType("text")
                        .HasColumnName("required_accessories");

                    b.Property<bool>("RequiresActivation")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_activation");

                    b.Property<bool>("RequiresLicense")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_license");

                    b.Property<bool>("RequiresMaintenance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_maintenance");

                    b.Property<decimal?>("ResidualValuePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("residual_value_percentage");

                    b.Property<string>("SKU")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<string>("Series")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("series");

                    b.Property<int?>("StandardWarrantyMonths")
                        .HasColumnType("integer")
                        .HasColumnName("standard_warranty_months");

                    b.Property<string>("Storage")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("storage");

                    b.Property<string>("SupportDocumentUrl")
                        .HasColumnType("text")
                        .HasColumnName("support_document_url");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("TechnicalSpecs")
                        .HasColumnType("text")
                        .HasColumnName("technical_specs");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<int?>("UsefulLifeMonths")
                        .HasColumnType("integer")
                        .HasColumnName("useful_life_months");

                    b.Property<string>("UserManualUrl")
                        .HasColumnType("text")
                        .HasColumnName("user_manual_url");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.Property<string>("WarrantyType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("warranty_type");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.Property<string>("WeightUnit")
                        .HasColumnType("text")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_models_category_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_models_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_models_deleted_by_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_models_is_active");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_models_manufacturer_id");

                    b.HasIndex("ModelNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_models_model_number")
                        .HasFilter("is_deleted = false AND model_number IS NOT NULL");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_models_name");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasDatabaseName("ix_models_sku")
                        .HasFilter("is_deleted = false AND sku IS NOT NULL");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_models_type_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_models_updated_by_id");

                    b.ToTable("models");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_org_nodes");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_org_nodes_parent_id");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_org_nodes_type");

                    b.ToTable("org_nodes");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.PermissionEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("resource");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Resource", "Action")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_resource_action")
                        .HasFilter("is_deleted = false");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ResourceEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("node_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.HasIndex("NodeId")
                        .HasDatabaseName("ix_resources_node_id");

                    b.HasIndex("Type", "NodeId")
                        .HasDatabaseName("ix_resources_type_node");

                    b.ToTable("resources");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.RoleEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_code")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("Rank")
                        .HasDatabaseName("ix_roles_rank");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.RolePermissionEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("ix_role_permissions_role_permission")
                        .HasFilter("is_deleted = false");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.SupplierEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountManagerEmail")
                        .HasColumnType("text")
                        .HasColumnName("account_manager_email");

                    b.Property<string>("AccountManagerName")
                        .HasColumnType("text")
                        .HasColumnName("account_manager_name");

                    b.Property<string>("AccountManagerPhone")
                        .HasColumnType("text")
                        .HasColumnName("account_manager_phone");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasColumnType("numeric")
                        .HasColumnName("annual_revenue");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_date");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_renew");

                    b.Property<decimal?>("AverageOrderValue")
                        .HasColumnType("numeric")
                        .HasColumnName("average_order_value");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankName")
                        .HasColumnType("text")
                        .HasColumnName("bank_name");

                    b.Property<string>("BankRoutingNumber")
                        .HasColumnType("text")
                        .HasColumnName("bank_routing_number");

                    b.Property<string>("BondingInformation")
                        .HasColumnType("text")
                        .HasColumnName("bonding_information");

                    b.Property<string>("BusinessLicenseUrl")
                        .HasColumnType("text")
                        .HasColumnName("business_license_url");

                    b.Property<string>("BusinessType")
                        .HasColumnType("text")
                        .HasColumnName("business_type");

                    b.Property<string>("CertificateOfInsuranceUrl")
                        .HasColumnType("text")
                        .HasColumnName("certificate_of_insurance_url");

                    b.Property<string>("Certifications")
                        .HasColumnType("text")
                        .HasColumnName("certifications");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_person_email");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text")
                        .HasColumnName("contact_person_name");

                    b.Property<string>("ContactPersonPhone")
                        .HasColumnType("text")
                        .HasColumnName("contact_person_phone");

                    b.Property<string>("ContactPersonTitle")
                        .HasColumnType("text")
                        .HasColumnName("contact_person_title");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("ContractDocumentUrl")
                        .HasColumnType("text")
                        .HasColumnName("contract_document_url");

                    b.Property<DateTime?>("ContractEndDate")
                        .HasColumnType("date")
                        .HasColumnName("contract_end_date");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("text")
                        .HasColumnName("contract_number");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("date")
                        .HasColumnName("contract_start_date");

                    b.Property<long?>("CountryEfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_limit");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("DUNSNumber")
                        .HasColumnType("text")
                        .HasColumnName("dunsnumber");

                    b.Property<int?>("DefectRate")
                        .HasColumnType("integer")
                        .HasColumnName("defect_rate");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<int?>("DeliveryRating")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_rating");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_rate");

                    b.Property<bool>("DropShipCapable")
                        .HasColumnType("boolean")
                        .HasColumnName("drop_ship_capable");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("integer")
                        .HasColumnName("employee_count");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("established_date");

                    b.Property<string>("Fax")
                        .HasColumnType("text")
                        .HasColumnName("fax");

                    b.Property<string>("GLN")
                        .HasColumnType("text")
                        .HasColumnName("gln");

                    b.Property<string>("IBAN")
                        .HasColumnType("text")
                        .HasColumnName("iban");

                    b.Property<string>("ISO14001Certified")
                        .HasColumnType("text")
                        .HasColumnName("iso14001_certified");

                    b.Property<string>("ISO9001Certified")
                        .HasColumnType("text")
                        .HasColumnName("iso9001_certified");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("industry");

                    b.Property<string>("IndustryType")
                        .HasColumnType("text")
                        .HasColumnName("industry_type");

                    b.Property<decimal?>("InsuranceCoverage")
                        .HasColumnType("numeric")
                        .HasColumnName("insurance_coverage");

                    b.Property<DateTime?>("InsuranceExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insurance_expiry_date");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("insurance_policy_number");

                    b.Property<string>("InsuranceProvider")
                        .HasColumnType("text")
                        .HasColumnName("insurance_provider");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnvironmentallyCertified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_environmentally_certified");

                    b.Property<bool>("IsMBE")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mbe");

                    b.Property<bool>("IsMinorityOwned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_minority_owned");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preferred");

                    b.Property<bool>("IsSDVOSB")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sdvosb");

                    b.Property<bool>("IsSmallBusiness")
                        .HasColumnType("boolean")
                        .HasColumnName("is_small_business");

                    b.Property<bool>("IsVeteranOwned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_veteran_owned");

                    b.Property<bool>("IsWBE")
                        .HasColumnType("boolean")
                        .HasColumnName("is_wbe");

                    b.Property<bool>("IsWomanOwned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_woman_owned");

                    b.Property<DateTime?>("LastOrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_order_date");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_review_date");

                    b.Property<int?>("LeadTimeDays")
                        .HasColumnType("integer")
                        .HasColumnName("lead_time_days");

                    b.Property<string>("LegalName")
                        .HasColumnType("text")
                        .HasColumnName("legal_name");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("MinimumOrderCurrency")
                        .HasColumnType("text")
                        .HasColumnName("minimum_order_currency");

                    b.Property<decimal?>("MinimumOrderValue")
                        .HasColumnType("numeric")
                        .HasColumnName("minimum_order_value");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("OnTimeDeliveryPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("on_time_delivery_percentage");

                    b.Property<string>("OurAccountManager")
                        .HasColumnType("text")
                        .HasColumnName("our_account_manager");

                    b.Property<DateTime?>("PartnerSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("partner_since");

                    b.Property<string>("PaymentMethods")
                        .HasColumnType("text")
                        .HasColumnName("payment_methods");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("payment_terms");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<int?>("PriceRating")
                        .HasColumnType("integer")
                        .HasColumnName("price_rating");

                    b.Property<string>("ProcurementNotes")
                        .HasColumnType("text")
                        .HasColumnName("procurement_notes");

                    b.Property<string>("ProductCategories")
                        .HasColumnType("text")
                        .HasColumnName("product_categories");

                    b.Property<bool>("Provides24x7Support")
                        .HasColumnType("boolean")
                        .HasColumnName("provides24x7_support");

                    b.Property<int?>("QualityRating")
                        .HasColumnType("integer")
                        .HasColumnName("quality_rating");

                    b.Property<string>("References")
                        .HasColumnType("text")
                        .HasColumnName("references");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registration_number");

                    b.Property<bool>("RequiresBackgroundCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_background_check");

                    b.Property<bool>("RequiresInsurance")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_insurance");

                    b.Property<string>("RevenueCurrency")
                        .HasColumnType("text")
                        .HasColumnName("revenue_currency");

                    b.Property<string>("RiskFactors")
                        .HasColumnType("text")
                        .HasColumnName("risk_factors");

                    b.Property<string>("RiskLevel")
                        .HasColumnType("text")
                        .HasColumnName("risk_level");

                    b.Property<string>("SLADocumentUrl")
                        .HasColumnType("text")
                        .HasColumnName("sladocument_url");

                    b.Property<string>("ServiceCategories")
                        .HasColumnType("text")
                        .HasColumnName("service_categories");

                    b.Property<int?>("ServiceRating")
                        .HasColumnType("integer")
                        .HasColumnName("service_rating");

                    b.Property<string>("ShippingMethods")
                        .HasColumnType("text")
                        .HasColumnName("shipping_methods");

                    b.Property<string>("ShippingTerms")
                        .HasColumnType("text")
                        .HasColumnName("shipping_terms");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("Specialization")
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("text")
                        .HasColumnName("supplier_code");

                    b.Property<string>("SupplierStatus")
                        .HasColumnType("text")
                        .HasColumnName("supplier_status");

                    b.Property<string>("SupplierType")
                        .HasColumnType("text")
                        .HasColumnName("supplier_type");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("text")
                        .HasColumnName("support_email");

                    b.Property<string>("SupportHours")
                        .HasColumnType("text")
                        .HasColumnName("support_hours");

                    b.Property<string>("SupportPhone")
                        .HasColumnType("text")
                        .HasColumnName("support_phone");

                    b.Property<string>("SustainabilityRating")
                        .HasColumnType("text")
                        .HasColumnName("sustainability_rating");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("text")
                        .HasColumnName("swift_code");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("TaxCode")
                        .HasColumnType("text")
                        .HasColumnName("tax_code");

                    b.Property<bool>("TaxExempt")
                        .HasColumnType("boolean")
                        .HasColumnName("tax_exempt");

                    b.Property<string>("TaxExemptCertificate")
                        .HasColumnType("text")
                        .HasColumnName("tax_exempt_certificate");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_id");

                    b.Property<int?>("TotalOrders")
                        .HasColumnType("integer")
                        .HasColumnName("total_orders");

                    b.Property<decimal?>("TotalSpent")
                        .HasColumnType("numeric")
                        .HasColumnName("total_spent");

                    b.Property<string>("TotalSpentCurrency")
                        .HasColumnType("text")
                        .HasColumnName("total_spent_currency");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("VATNumber")
                        .HasColumnType("text")
                        .HasColumnName("vatnumber");

                    b.Property<string>("W9FormUrl")
                        .HasColumnType("text")
                        .HasColumnName("w9_form_url");

                    b.Property<string>("WarehouseLocations")
                        .HasColumnType("text")
                        .HasColumnName("warehouse_locations");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_suppliers");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_suppliers_code")
                        .HasFilter("is_deleted = false AND code IS NOT NULL");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_suppliers_company_id");

                    b.HasIndex("ContactEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_suppliers_contact_email")
                        .HasFilter("is_deleted = false AND contact_email IS NOT NULL");

                    b.HasIndex("CountryEfId");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_suppliers_country_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_suppliers_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_suppliers_deleted_by_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_suppliers_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_suppliers_name");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_suppliers_updated_by_id");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UsageStatusEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer")
                        .HasColumnName("order_no");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_usage_statuses");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_usage_statuses_code")
                        .HasFilter("is_deleted = false");

                    b.ToTable("usage_statuses");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UserDeviceEf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("browser");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_name");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("device_type");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTrusted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_trusted");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity_at");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("operating_system");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expires_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_devices");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_user_devices_created_at");

                    b.HasIndex("LastLoginAt")
                        .HasDatabaseName("ix_user_devices_last_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_devices_user_id");

                    b.HasIndex("DeviceId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_devices_device_user")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("ix_user_devices_user_active");

                    b.ToTable("user_devices");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UserEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_verified_at");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_phone_verified");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneCountryCode")
                        .HasColumnType("text")
                        .HasColumnName("phone_country_code");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("PhoneVerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("phone_verified_at");

                    b.Property<string>("PreferredLanguage")
                        .HasColumnType("text")
                        .HasColumnName("preferred_language");

                    b.Property<bool>("ReceiveMarketingEmails")
                        .HasColumnType("boolean")
                        .HasColumnName("receive_marketing_emails");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("receive_notifications");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.Property<string>("TwoFactorBackupCodes")
                        .HasColumnType("text")
                        .HasColumnName("two_factor_backup_codes");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("TwoFactorSecret")
                        .HasColumnType("text")
                        .HasColumnName("two_factor_secret");

                    b.Property<DateTime?>("TwoFactorSetupDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("two_factor_setup_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username")
                        .HasFilter("is_deleted = false");

                    b.ToTable("users");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UserNodeRoleEf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("node_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_node_roles");

                    b.HasIndex("NodeId")
                        .HasDatabaseName("ix_user_node_roles_node_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_node_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_node_roles_user_id");

                    b.HasIndex("UserId", "NodeId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_node_roles_user_node_role")
                        .HasFilter("is_deleted = false");

                    b.ToTable("user_node_roles");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetCategoryEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetCategoryEf", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asset_categories_asset_categories_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetTypeEf", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_asset_types_asset_type_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetCategoryEf", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_asset_categories_category_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CompanyDetailsEf", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_company_details_company_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetConditionEf", "Condition")
                        .WithMany("Assets")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_asset_conditions_condition_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", null)
                        .WithMany("Assets")
                        .HasForeignKey("CountryEfId");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_countries_country_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_users_created_by_user_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.LifecycleStatusEf", "LifecycleStatus")
                        .WithMany("Assets")
                        .HasForeignKey("LifecycleStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_lifecycle_statuses_lifecycle_status_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.LocationEf", "Location")
                        .WithMany("Assets")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_locations_location_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.ManufacturerEf", "Manufacturer")
                        .WithMany("Assets")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_manufacturers_manufacturer_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.ModelEf", "Model")
                        .WithMany("Assets")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_models_model_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_users_owner_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.SupplierEf", "Supplier")
                        .WithMany("Assets")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_suppliers_supplier_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_users_updated_by_user_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UsageStatusEf", "UsageStatus")
                        .WithMany("Assets")
                        .HasForeignKey("UsageStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_assets_usage_statuses_usage_status_id");

                    b.Navigation("AssetType");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Condition");

                    b.Navigation("Country");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LifecycleStatus");

                    b.Navigation("Location");

                    b.Navigation("Manufacturer");

                    b.Navigation("Model");

                    b.Navigation("Owner");

                    b.Navigation("Supplier");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UsageStatus");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetEventEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asset_events_users_actor_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetEf", "Asset")
                        .WithMany("AssetEvents")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asset_events_assets_asset_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_events_users_created_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_asset_events_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetEventTypeEf", "EventType")
                        .WithMany("AssetEvents")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asset_events_asset_event_types_event_type_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_asset_events_users_updated_by_id");

                    b.Navigation("Actor");

                    b.Navigation("Asset");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EventType");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetTypeEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetTypeEf", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asset_types_asset_types_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssignmentEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetEf", "Asset")
                        .WithMany("Assignments")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asset_assignments_assets_asset_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asset_assignments_users_by_user_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_assignments_users_created_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_asset_assignments_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_asset_assignments_users_updated_by_id");

                    b.Navigation("Asset");

                    b.Navigation("ByUser");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AttachmentEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetEf", "Asset")
                        .WithMany("Attachments")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_asset_attachments_assets_asset_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_attachments_users_created_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_asset_attachments_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_asset_attachments_users_updated_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asset_attachments_users_uploader_id");

                    b.Navigation("Asset");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.CompanyDetailsEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", "Node")
                        .WithOne("CompanyDetails")
                        .HasForeignKey("FAM.Infrastructure.PersistenceModels.Ef.CompanyDetailsEf", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_details_org_nodes_node_id");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_countries_users_created_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_countries_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_countries_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.DepartmentDetailsEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", "Node")
                        .WithOne("DepartmentDetails")
                        .HasForeignKey("FAM.Infrastructure.PersistenceModels.Ef.DepartmentDetailsEf", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_details_org_nodes_node_id");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.FinanceEntryEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetEf", "Asset")
                        .WithMany("FinanceEntries")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_finance_entries_assets_asset_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_finance_entries_users_creator_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById1");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_finance_entries_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_finance_entries_users_updated_by_id");

                    b.Navigation("Asset");

                    b.Navigation("CreatedBy");

                    b.Navigation("Creator");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.LocationEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CompanyDetailsEf", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_company_details_company_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", null)
                        .WithMany("Locations")
                        .HasForeignKey("CountryEfId");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_countries_country_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.LocationEf", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_locations_parent_id");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ManufacturerEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", null)
                        .WithMany("Manufacturers")
                        .HasForeignKey("CountryEfId");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_manufacturers_countries_country_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_manufacturers_users_created_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_manufacturers_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_manufacturers_users_updated_by_id");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ModelEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetCategoryEf", "Category")
                        .WithMany("Models")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_models_asset_categories_category_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_models_users_created_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_models_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.ManufacturerEf", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_models_manufacturers_manufacturer_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.AssetTypeEf", "Type")
                        .WithMany("Models")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_models_asset_types_type_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_models_users_updated_by_id");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Manufacturer");

                    b.Navigation("Type");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_org_nodes_org_nodes_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ResourceEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", "Node")
                        .WithMany("Resources")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resources_org_nodes_node_id");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.RolePermissionEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.PermissionEf", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.RoleEf", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.SupplierEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CompanyDetailsEf", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_suppliers_company_details_company_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", null)
                        .WithMany("Suppliers")
                        .HasForeignKey("CountryEfId");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_suppliers_countries_country_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_suppliers_users_created_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_suppliers_users_deleted_by_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_suppliers_users_updated_by_id");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UserDeviceEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "User")
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_devices_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UserNodeRoleEf", b =>
                {
                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", "Node")
                        .WithMany("UserNodeRoles")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_node_roles_org_nodes_node_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.RoleEf", "Role")
                        .WithMany("UserNodeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_node_roles_roles_role_id");

                    b.HasOne("FAM.Infrastructure.PersistenceModels.Ef.UserEf", "User")
                        .WithMany("UserNodeRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_node_roles_users_user_id");

                    b.Navigation("Node");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetCategoryEf", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Children");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetConditionEf", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetEf", b =>
                {
                    b.Navigation("AssetEvents");

                    b.Navigation("Assignments");

                    b.Navigation("Attachments");

                    b.Navigation("FinanceEntries");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetEventTypeEf", b =>
                {
                    b.Navigation("AssetEvents");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.AssetTypeEf", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Children");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.CountryEf", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Locations");

                    b.Navigation("Manufacturers");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.LifecycleStatusEf", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.LocationEf", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ManufacturerEf", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.ModelEf", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.OrgNodeEf", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CompanyDetails");

                    b.Navigation("DepartmentDetails");

                    b.Navigation("Resources");

                    b.Navigation("UserNodeRoles");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.PermissionEf", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.RoleEf", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserNodeRoles");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.SupplierEf", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UsageStatusEf", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("FAM.Infrastructure.PersistenceModels.Ef.UserEf", b =>
                {
                    b.Navigation("UserDevices");

                    b.Navigation("UserNodeRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
